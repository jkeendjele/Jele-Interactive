{"version":3,"sources":["components/LoginForm.jsx","components/MessageForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/ChatFeed.jsx","App.js","index.js"],"names":["LoginForm","useState","username","setUsername","password","setPassword","error","setError","handleSubmit","e","a","preventDefault","authObject","axios","get","headers","localStorage","setItem","window","location","reload","className","onSubmit","type","value","onChange","target","placeholder","required","align","MessageForm","props","setValue","chatId","creds","event","text","trim","length","sendMessage","isTyping","htmlFor","PictureOutlined","multiple","id","style","display","files","SendOutlined","MyMessage","message","attachments","src","file","alt","float","marginRight","color","backgroundColor","TheirMessage","lastMessage","isFirstMessageByUser","sender","backgroundImage","avatar","marginLeft","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","renderMessages","keys","Object","key","lastMessageKey","width","title","height","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","ReactDom","render","document","getElementById"],"mappings":"4OAiDeA,EA9CG,WACd,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAEMC,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACjBD,EAAEE,iBAKIC,EAAa,CAAE,aAAc,uCAAwC,YAAaV,EAAU,cAAeE,GANhG,kBASbS,IAAMC,IAAI,kCAAmC,CAAEC,QAASH,IAT3C,OAWnBI,aAAaC,QAAQ,WAAYf,GACjCc,aAAaC,QAAQ,WAAYb,GAEjCc,OAAOC,SAASC,SAChBb,EAAS,IAfU,kDAiBnBA,EAAS,gCAjBU,0DAAH,sDAqBlB,OACA,qBAAKc,UAAU,UAAf,SACQ,sBAAKA,UAAU,OAAf,UACA,oBAAIA,UAAU,QAAd,iDACJ,uBAAMC,SAAUd,EAAhB,UACE,uBAAOe,KAAK,OAAOC,MAAOtB,EAAUuB,SAAU,SAAChB,GAAD,OAAON,EAAYM,EAAEiB,OAAOF,QAAQH,UAAU,QAAQM,YAAY,WAAWC,UAAQ,IACnI,uBAAOL,KAAK,WAAWC,MAAOpB,EAAUqB,SAAU,SAAChB,GAAD,OAAOJ,EAAYI,EAAEiB,OAAOF,QAAQH,UAAU,QAAQM,YAAY,WAAWC,UAAQ,IACvI,qBAAKC,MAAM,SAAX,SACE,wBAAQN,KAAK,SAASF,UAAU,SAAhC,SACE,sDAGJ,oBAAIA,UAAU,QAAd,SAAuBf,a,kBCiBlBwB,EArDK,SAACC,GACjB,MAA0B9B,mBAAS,KAAnC,mBAAOuB,EAAP,KAAcQ,EAAd,KACQC,EAAkBF,EAAlBE,OAAQC,EAAUH,EAAVG,MAEV1B,EAAe,SAAC2B,GAClBA,EAAMxB,iBAEN,IAAMyB,EAAOZ,EAAMa,OAEhBD,EAAKE,OAAS,GAAGC,YAAYL,EAAOD,EAAQ,CAAEG,SAEjDJ,EAAS,KAWb,OACI,uBAAMX,UAAU,eAAeC,SAAUd,EAAzC,UACI,uBACIa,UAAU,gBACVM,YAAY,oBACZH,MAAOA,EACPC,SAfS,SAACU,GAClBH,EAASG,EAAMT,OAAOF,OAEtBgB,YAAST,EAAOE,IAaRX,SAAUd,IAGd,uBAAOiC,QAAQ,gBAAf,SACI,sBAAMpB,UAAU,eAAhB,SACI,cAACqB,EAAA,EAAD,CAAiBrB,UAAU,qBAInC,uBACGE,KAAK,OACLoB,UAAU,EACVC,GAAG,gBACHC,MAAO,CAAEC,QAAS,QAClBrB,SAzBU,SAACU,GAClBI,YAAYL,EAAOD,EAAQ,CAAEc,MAAOZ,EAAMT,OAAOqB,MAAOX,KAAM,QA2B1D,wBAAQb,KAAK,SAASF,UAAU,cAAhC,SACI,cAAC2B,EAAA,EAAD,CAAc3B,UAAU,oBCjCzB4B,EAlBG,SAAC,GAAiB,IAAD,EAAdC,EAAc,EAAdA,QACjB,OAAU,OAAPA,QAAO,IAAPA,GAAA,UAAAA,EAASC,mBAAT,eAAsBb,QAAS,EAE1B,qBACIc,IAAKF,EAAQC,YAAY,GAAGE,KAC5BC,IAAI,qBACJjC,UAAU,gBACVwB,MAAO,CAAEU,MAAO,WAKxB,qBAAKlC,UAAU,UAAUwB,MAAO,CAAEU,MAAO,QAASC,YAAa,OAAQC,MAAO,QAASC,gBAAiB,WAAxG,SACKR,EAAQd,QCmBNuB,EAhCM,SAAC,GAA8B,IAAD,IAA3BC,EAA2B,EAA3BA,YAAaV,EAAc,EAAdA,QAC3BW,GAAwBD,GAAeA,EAAYE,OAAO5D,WAAagD,EAAQY,OAAO5D,SAE5F,OACI,sBAAKmB,UAAU,cAAf,UACKwC,GACG,qBACIxC,UAAU,iBACVwB,MAAO,CAACkB,gBAAgB,OAAD,cAASb,QAAT,IAASA,GAAT,UAASA,EAASY,cAAlB,aAAS,EAAiBE,OAA1B,SAKhB,OAAPd,QAAO,IAAPA,GAAA,UAAAA,EAASC,mBAAT,eAAsBb,QAAS,EAEvB,qBACIc,IAAKF,EAAQC,YAAY,GAAGE,KAC5BC,IAAI,qBACJjC,UAAU,gBACVwB,MAAO,CAAEoB,WAAYJ,EAAuB,MAAQ,UAGxD,qBAAKxC,UAAU,UAAUwB,MAAO,CAAEU,MAAO,OAAQG,gBAAiB,UAAWO,WAAYJ,EAAuB,MAAQ,QAAxH,SACCX,EAAQd,WC8CtB8B,EAjEE,SAACnC,GACd,IAAQoC,EAA0CpC,EAA1CoC,MAAOC,EAAmCrC,EAAnCqC,WAAYC,EAAuBtC,EAAvBsC,SAAUC,EAAavC,EAAbuC,SAE/BC,EAAOJ,GAASA,EAAMC,GAEtBI,EAAqB,SAACtB,EAASuB,GACjC,OAAOF,EAAKG,OAAOC,KAAI,SAACC,EAAQC,GAAT,aAAmBD,EAAOE,YAAc5B,EAAQN,IACnE,qBAEIvB,UAAU,eACVwB,MAAO,CACHU,MAAOkB,EAAc,QAAU,OAC/BV,gBAAgB,OAAD,cAASa,QAAT,IAASA,GAAT,UAASA,EAAQA,cAAjB,aAAS,EAAgBZ,OAAzB,OALvB,eACiBa,QAUnBE,EAAiB,WACnB,IAAMC,EAAOC,OAAOD,KAAKV,GAEzB,OAAOU,EAAKL,KAAI,SAACO,EAAKL,GAClB,IAAM3B,EAAUoB,EAASY,GACnBC,EAA2B,IAAVN,EAAc,KAAOG,EAAKH,EAAQ,GACnDJ,EAAcJ,IAAanB,EAAQY,OAAO5D,SAEhD,OACI,sBAA0B2C,MAAO,CAAEuC,MAAO,QAA1C,UACI,qBAAK/D,UAAU,gBAAf,SAEQoD,EACE,cAAC,EAAD,CAAWvB,QAASA,IACpB,cAAC,EAAD,CAAcA,QAASA,EAASU,YAAaU,EAASa,OAGhE,qBAAK9D,UAAU,gBAAgBwB,MAAO,CAAEW,YAAaiB,EAAc,OAAS,MAAOR,WAAYQ,EAAc,MAAQ,QAArH,SACKD,EAAmBtB,EAASuB,OATrC,cAAiBI,QAmB7B,OAFAE,IAEIR,EAGA,sBAAKlD,UAAU,YAAf,UACI,sBAAKA,UAAU,uBAAf,UACI,qBAAKA,UAAU,aAAf,SAA6BkD,EAAKc,QAClC,qBAAKhE,UAAU,gBAAf,SACKkD,EAAKG,OAAOC,KAAI,SAACC,GAAD,gBAAeA,EAAOA,OAAO1E,kBAGrD6E,IACD,qBAAKlC,MAAO,CAAEyC,OAAQ,WACtB,qBAAKjE,UAAU,yBAAf,SACI,cAAC,EAAD,2BAAkBU,GAAlB,IAAyBE,OAAQmC,UAb5B,eC9BNmB,G,OAbH,WACR,OAAIvE,aAAawE,QAAQ,YAErB,cAAC,IAAD,CACIF,OAAO,QACPG,UAAU,uCACVpB,SAAUrD,aAAawE,QAAQ,YAC/BE,WAAY1E,aAAawE,QAAQ,YACjCG,eAAgB,SAACC,GAAD,OAAkB,cAAC,EAAD,eAAeA,OAPZ,cAAC,EAAD,MCJjDC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.bd1cecbb.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst LoginForm = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [error, setError] = useState('');\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        //get the information inputed stored on the chat engine\r\n        //if works = logged in\r\n        //if not pass an error message\r\n        const authObject = { 'Project-ID': \"70fc83a1-de15-4b3d-8d7f-4c703870dc7b\", 'User-Name': username, 'User-Secret': password };\r\n\r\n    try {\r\n      await axios.get('https://api.chatengine.io/chats', { headers: authObject }); //if successful move to here, otherwise catch\r\n\r\n      localStorage.setItem('username', username);// so that users dont have to log in again\r\n      localStorage.setItem('password', password);\r\n\r\n      window.location.reload();\r\n      setError('');\r\n    } catch (err) {\r\n      setError('Oops, incorrect credentials.');\r\n    }\r\n  };\r\n\r\n    return(\r\n    <div className=\"wrapper\">\r\n            <div className=\"form\">\r\n            <h1 className=\"title\">Popyea Remote Work Chat Application</h1>\r\n        <form onSubmit={handleSubmit}>\r\n          <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} className=\"input\" placeholder=\"Username\" required />\r\n          <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"input\" placeholder=\"Password\" required />\r\n          <div align=\"center\">\r\n            <button type=\"submit\" className=\"button\">\r\n              <span>Start chatting</span>\r\n            </button>\r\n          </div>\r\n          <h2 className=\"error\">{error}</h2>\r\n        </form>\r\n      </div>\r\n    </div>\r\n\r\n    );\r\n}\r\n\r\nexport default LoginForm","//the form that we will use to create messages\r\nimport { useState } from 'react';\r\nimport { sendMessage, isTyping } from 'react-chat-engine';\r\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons';\r\n\r\nconst MessageForm = (props) => {\r\n    const [value, setValue] = useState(' ');\r\n    const { chatId, creds } = props;\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault(); //makes sure browser does not refresh when form submmited\r\n\r\n        const text = value.trim();\r\n\r\n        if(text.length > 0) sendMessage(creds, chatId, { text });\r\n\r\n        setValue('');\r\n    }\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value); //where value of the input is stored in.\r\n\r\n        isTyping(props, chatId);\r\n    }\r\n    const handleUpload = (event) => {\r\n        sendMessage(creds, chatId, { files: event.target.files, text: ''});\r\n\r\n    }\r\n    return (\r\n        <form className=\"message-form\" onSubmit={handleSubmit}>\r\n            <input\r\n                className=\"message-input\"\r\n                placeholder=\"Send a message...\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                onSubmit={handleSubmit}\r\n            \r\n            />\r\n            <label htmlFor=\"upload-button\">\r\n                <span className=\"image-button\">\r\n                    <PictureOutlined className=\"picture-icon\" />\r\n                </span>\r\n\r\n            </label>\r\n            <input \r\n               type=\"file\"\r\n               multiple={false}\r\n               id=\"upload-button\"\r\n               style={{ display: 'none'}}\r\n               onChange={handleUpload}\r\n\r\n            />\r\n            <button type=\"submit\" className=\"send-button\">\r\n                <SendOutlined className=\"send-icon\"/>\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default MessageForm;","//will be a chat bubble that you send\r\nconst MyMessage = ({ message }) => {\r\n    if(message?.attachments?.length > 0) { //renders the image if our message is the image\r\n        return (\r\n            <img \r\n                src={message.attachments[0].file}\r\n                alt=\"message-attachment\"\r\n                className=\"message-image\"\r\n                style={{ float: 'right' }}\r\n            />\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"message\" style={{ float: 'right', marginRight: '18px', color: 'white', backgroundColor: '#3B2A50'}}> \r\n            {message.text}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyMessage;","//This will be messages that other people send\r\nconst TheirMessage = ({ lastMessage, message }) => {\r\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;  // if it is not last message... will give boolean value \r\n    \r\n    return (\r\n        <div className=\"message-row\">\r\n            {isFirstMessageByUser && (\r\n                <div \r\n                    className=\"message-avatar\"\r\n                    style={{backgroundImage: `url(${message?.sender?.avatar})`}}\r\n                \r\n                />\r\n            )}\r\n            {\r\n                    message?.attachments?.length > 0 //renders the image if our message is the image\r\n                        ? (\r\n                            <img \r\n                                src={message.attachments[0].file}\r\n                                alt=\"message-attachment\"\r\n                                className=\"message-image\"\r\n                                style={{ marginLeft: isFirstMessageByUser ? '4px' : '48px' }}\r\n                            />\r\n                        ): ( //if image not returned, we'll render base message\r\n                            <div className=\"message\" style={{ float: 'left', backgroundColor: '#CABCDC', marginLeft: isFirstMessageByUser ? '4px' : '48px'}}> \r\n                            {message.text}\r\n                            </div>\r\n                        )\r\n                    \r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TheirMessage;","import MessageForm from './MessageForm';\r\nimport MyMessage from './MyMessage';\r\nimport TheirMessage from './TheirMessage';\r\n\r\n\r\nconst ChatFeed = (props) => {\r\n    const { chats, activeChat, userName, messages } = props; // destructuring props\r\n\r\n    const chat = chats && chats[activeChat]; //if chats exist, find chat then the active chat\r\n\r\n    const renderReadReceipts = (message, isMyMessage) => { //map over people who read the message\r\n        return chat.people.map((person, index) => person.last_read === message.id && (\r\n            <div \r\n                key={`read_${index}`}\r\n                className=\"read-receipt\"\r\n                style={{\r\n                    float: isMyMessage ? 'right' : 'left',\r\n                    backgroundImage: `url(${person?.person?.avatar})`\r\n                }}\r\n            />\r\n        ));\r\n    }\r\n\r\n    const renderMessages = () => { //used to fetch all our messages, takes key from messages and puts them in here\r\n        const keys = Object.keys(messages);\r\n\r\n        return keys.map((key, index) => {\r\n            const message = messages[key];\r\n            const lastMessageKey = index === 0 ? null : keys[index - 1]; //if messages, find last message\r\n            const isMyMessage = userName === message.sender.username;\r\n\r\n            return(\r\n                <div key={`msg_${index}`} style={{ width: '100%' }}>\r\n                    <div className=\"message-block\">\r\n                        {\r\n                            isMyMessage\r\n                            ? <MyMessage message={message}/>\r\n                            : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />\r\n                        }\r\n                    </div>\r\n                    <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px' }}>\r\n                        {renderReadReceipts(message, isMyMessage)}\r\n                    </div>\r\n\r\n                </div>\r\n            );\r\n        })\r\n    };\r\n\r\n    renderMessages();\r\n\r\n    if(!chat) return 'Loading ...';\r\n\r\n    return (\r\n        <div className=\"chat-feed\">\r\n            <div className=\"chat-title-container\">\r\n                <div className=\"chat-title\">{chat.title}</div>\r\n                <div className=\"chat-subtitle\">\r\n                    {chat.people.map((person) => `${person.person.username}`)}\r\n                </div>\r\n            </div>\r\n            {renderMessages()}\r\n            <div style={{ height: '100px' }} />\r\n            <div className=\"message-form-container\">\r\n                <MessageForm { ...props} chatId={activeChat} />                \r\n            </div> \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatFeed;","import { ChatEngine } from 'react-chat-engine';\r\n\r\nimport LoginForm from './components/LoginForm'\r\n\r\nimport ChatFeed from './components/ChatFeed';\r\n\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n    if(!localStorage.getItem('username')) return <LoginForm /> //if no username then return the login page\r\n    return (\r\n        <ChatEngine //1. the users information in the chat engine\r\n            height=\"100vh\"\r\n            projectID=\"70fc83a1-de15-4b3d-8d7f-4c703870dc7b\"\r\n            userName={localStorage.getItem('username')}\r\n            userSecret={localStorage.getItem('password')}\r\n            renderChatFeed={(chatAppProps) => <ChatFeed {... chatAppProps}/>} //renders own component for entire chat feed\r\n        />\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDom.render(<App />, document.getElementById('root'));  //will render majority of app in here\r\n"],"sourceRoot":""}